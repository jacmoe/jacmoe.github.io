#+STARTUP: fold
#+hugo_base_dir: ..
#+bibliography: ~/Dropbox/skriv/jacmoe.bib
#+cite_export: csl
#+OPTIONS: ^:nil ‘:nil
* draft Emacs - my Hotel California of creative writing :@post:emacs:org_mode:writing:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-my-hotel-california-of-creative-writing
:END:
#+begin_description
#+end_description
** Introduction
#+attr_html: :alt Emacs - my Hotel California :title Emacs - my Hotel California :width 100%
[[/images/hotel-california/hotel-california.png]]

This blog post is a detailed explanation of why Emacs is my Hotel California of creative writing. It shows how I have created a writing environment exactly how I want it to be, and why there—in my mind—is nothing out there that compares to it.

#+begin_export html
<div id="contents" style="position:fixed;width: 200px;right:0;top:0">
#+end_export
#+toc: headlines 1
#+begin_export html
</div>
#+end_export
** Emacs
#+begin_quote
“I use emacs, which might be thought of as a thermonuclear word processor... the engineer-hours that, in the case of Microsoft Word, were devoted to features like mail merge, and the ability to embed feature-length motion pictures in corporate memoranda, were, in the case of emacs, focused with maniacal intensity on the deceptively simple-seeming problem of editing text. If you are a professional writer... emacs outshines all other editing software in approximately the same way that the noonday sun does the stars. It is not just bigger and brighter; it simply makes everything else vanish.”
#+end_quote
/-Neal Stephenson, 1998 ([[https://en.wikipedia.org/wiki/In_the_Beginning..._Was_the_Command_Line][In the Beginning... Was the Command Line - Wikipedia]])/

I can make Emacs fit my workflow rather than the other way around.

Emacs is a LISP machine.
*** Emacs basics
**** Basic movement and editing
#+begin_export hugo
{{< youtube id="RuiBsWQeeTs" title="Emacs: Basic Movement and Editing" >}}
#+end_export
It’s highly recommended to run Emacs without any customization a couple of times to learn how the basic Emacs commands work. We can do that by running Emacs with the ~Q~ command-line argument, like this: ~emacs -Q~. If you want—again, highly recommended—you can run the Emacs Tutorial by running ~C-h t~. Do the tutorial until you feel confident. Also, experiment in the Scratch buffer, like in the video tutorial above.
*** Doom-Emacs
[[https://github.com/hlissner/doom-emacs][Doom-Emacs]] is a minimalist modern Emacs distribution that is light and fast.
** Org-mode
#+begin_export hugo
{{< youtube id="hnMntOQjs7Q" title="Emacs Org Mode Demo 2021" >}}
#+end_export

Here is a nerdy blog post about why Org-mode is a great markup language: [[https://karl-voit.at/2017/09/23/orgmode-as-markup-only/][Org Mode Syntax Is One of the Most Reasonable Markup Languages to Use for Text]]

- Official format
- Out-liner
- Organizer
- Extendable
- One hundred percent pure text

*** Standard markup

- ~*bold*~ *bold*
- ~/italic/~ /italic/
- ~_underline_~ _underline_
- ~~code~~  ~code~
- ~=monospaced=~ =monospaced=

*** Headings (structure)
A heading is one or more asterisks followed by a space and some text.

- ~* heading~ level 1 heading
- ~** heading~ level 2 heading
- ~*** heading~ level 3 heading, and so on
- ~* todo heading~ a heading with a todo
- ~* heading :tag:~ heading with a tag
- ~* heading :tag1:tag2:~ heading with two tags
- ~* heading :@category:~ heading with a category

Press ~C-<Enter>~ to insert a new heading at the same level as the heading you’re in.

~M-<up>~ and ~M-<down>~ will move a heading up and down.

~M-<left>~ and ~M-<right>~ will demote/promote a heading.

*** Lists
A list item is a dash (-) followed by a space and some text.

- ~- list item~ unnumbered list item
- ~1 list item~ numbered list item ()
- ~- [ ] list item~ list item with unchecked check box
- ~- [X] list item~ list item with checked check box

Press ~C-<Enter>~ to insert a new list item at the same level as the heading you’re in.

~M-<up>~ and ~M-<down>~ will move a list item up and down.

~M-<left>~ and ~M-<right>~ will demote/promote a list item.

*** Document options
**** TOC
~#+OPTIONS: toc:nil~ turns off the insertion of an auto-generated Table Of Contents (TOC) upon export.
You can then use ~#+toc: headlines 2~ to manually insert a table of contents into the document.

*** Miscellaneous
- ~[[link][description]]~ link with description (use ~c l~ to insert)
- ~[[file:link_to_file]]~ inline image is a file link *without* description
- ~# comment~ anything after a hash sign and a space will not be exported

*** Special blocks
In addition to the standard markup, Org-mode has special blocks. Use ~C-c C-,~ to insert a block.
#+attr_html: :alt Special blocks :title Special blocks :width 100%
[[/images/hotel-california/orgmode-blocks.png]]
For example, choosing “comment” as a block type will result in the following being inserted in the document:
#+begin_src
#+begin_comment
#+end_comment
#+end_src
The “verse” block is useful for when you want to have a piece of poetry and not have Emacs mess with the formatting.

Special blocks is a good way to extend the markup, and—of course—you can define your own special blocks.
*** Noexport tags
The ~:noexport:~ tag tells Org-mode that the contents—including any children—of a section is not to be exported. Useful for when you keep your work in one single file, including sections for things like research, notes, and character studies.
*** Ignore tags
The ~:ignore:~ tag instructs Org-mode to export the contents of a heading section, but not the heading itself. That’s useful when we organize your outline/document in chapters and scenes, but don’t want the exported text to be partioned with scene headings. Having the text partitioned using headings allows us to rearrange those sections of the document—promoting, demoting, moving up and down—and we wouldn’t be able to do that if the text was not organized in an outline. Or, put another way: the ~:ignore:~ tag allows us to keep the outline to ouselves.
*** Tables
In Org-mode tables are made of ASCII characters, but it feels like magic in action.
#+begin_export hugo
{{< youtube id="5vGGgfs0q3k" title="Using Emacs episode 54 - Org Tables" >}}
#+end_export
See [[https://orgmode.org/manual/Tables.html][Tables (The Org Manual)]] for more details.

We’ll see more of what Org-mode tables can do later on in this article, when discussing clock-tables and when discussing Org-tracktable.
** Boon
[[https://github.com/jyp/boon][Boon]] is a modal editing package for Emacs which is ergonomic and designed to integrate well with existing Emacs infrastructure. That means that we can continue to use the standard Emacs keyboard shortcuts should we choose to do so, in addition to the features that Boon provides.
#+begin_export html
<br/>
#+end_export
Boon is designed so that the right hand takes care of movement, and the left hand do the actions. And great care is taken to ensure that the fingers never leave the home row. Important for touch typists!
#+begin_export html
<br/>
#+end_export
Boon is a modal editing system with two modes: Command mode and Insert mode. Command mode is the default mode, and where we perform movement and commands. Insert mode is the mode where the keyboard acts like we’re used to: inserting letters as we type them (as opposed to perform commands).
#+begin_export html
<br/>
#+end_export
When in Command mode, we can switch to Insert mode by pressing ~v~. The cursor changes shape and color to indicate that we are indeed in Insert mode. For convenience, pressing ~S-v~ will insert a line below the current line and place the cursor in it, and ~C-v~ will insert a line above. That often saves us from a couple of keystrokes.
#+begin_export html
<br/>
#+end_export
In Insert mode, we can exit it by pressing ~<Esc>~ or ~C-;~. The cursor changes back to normal shape and color to indicate that pressing keys will no longer insert letters but perform commands. I’ve bound ~boon-quit~ to ~C-;~ because ~<Esc>~ is *not* on the home row, even if we rebind it to ~<Caps Lock>~, a fairly common thing to do. The combination of ~v~ and ~C-;~ means that we don’t have to move our fingers at all, even when switching between the two modes at speed. Ergonomics is important.
#+begin_export html
<br/>
#+end_export
~C-x~ and ~C-c~ shortcuts are handled in Boon so that any command starting with ~C-x~ is simply ~x~, and ~C-c C-~  shortcuts are just ~c~.
#+begin_export html
<br/>
#+end_export
Not all commands work as you would expect, however, so if we wanted to run ~find-file~ (~C-x C-f~) we will have to press ~x C-f~, and not ~x f~ (~set-fill-column~). That’s because ~set-fill-column~ normally uses the shortcut ~C-x f~, and there is no way to make a distinction between the two, ~find-file~ or ~set-fill-column~. Luckily, there aren’t many exceptions like this.
#+begin_export html
<br/>
#+end_export
Here’s how the keyboard layout looks like for Command mode using Boon:
#+attr_html: :alt The Hotel California layout :title The Hotel California layout :width 100%
[[/images/hotel-california/keyboard-layout.png]]
- Blue is Boon commands
- Green is movement commands
- Yellow is edit commands
- Purple is custom commands

We already covered the Boon commands in blue, so the following will not cover those.

*** Movement
*** Editing
*** Custom
- w : shows how many words have been written today (Org-TrackTable)
- E : go to last edit
- s : toggles center-cursor-mode
- G : grabs an URL from a running web browser and inserts it
- B : begin a Pomodoro session
- n : narrow to Org-mode heading
- N : widen the view (un-narrow)

** Dictionaries et cetera
*** Dictionary server
*** Webster
*** Powerthesaurus
*** Proselint
#+attr_html: :alt Proselint has checked the text and is not satisfied :title Proselint has checked the text and is not satisfied :width 100%
[[/images/hotel-california/proselint.png]]
*** Writegood-mode
~Writegood-mode~ is a minor mode that will highlight weasel words and passive voice.
#+attr_html: :alt Writegood-mode :title Writegood-mode :width 100%
[[/images/hotel-california/writegood-mode.png]]
The weasel words are highlighted in orange, passive voice in cyan.

Additional weasel words can be added to writegood-mode by editing the ~my/weasel-words~ list in ~config.el~ in the Doom user directory.
*** Typopunct
~Typopunct~ is a package that enables us to simply write regular ASCII single and double quotes and have them automatically be converted into typographical quotes.

For example, typing ~'quoted'~ will result in ‘quoted’, and ~"double-quoted"~ will result in “double-quoted”.

If we want to actually write a regular ASCII single or double quote, we need to use ~quoted-insert~, which is bound to ~C-q~, like this: ~C-q "~ to insert an ASCII ~"~.

/Note: some exporters, like the Hugo exporter, will automatically convert regular ASCII quotes to typographical quotes, unless you wrap them in code tags (~)/.

Additionally, ~typopunct~ also allows us to insert ~en-dash~ and ~em-dash~ by typing  ~--~ for – and ~---~ for —.
*** Special characters
** Tracking progress
*** Track-table
*** Clocking time
~c x i~ to clock in. ~c x o~ to clock out. ~c x q~ to cancel a clock.
There is also the option of starting a 20 minute Pomodoro session, by pressing ~B~.
Clocking is tied to the heading you are working under, and will add a ~:LOGBOOK:~ section to it, like this:
#+begin_src
:LOGBOOK:
CLOCK: [2017-04-10 Mon 15:18]
CLOCK: [2017-04-10 Mon 15:16]--[2017-04-10 Mon 15:17] =>  0:01
CLOCK: [2017-04-07 Fri 16:05]--[2017-04-07 Fri 16:35] =>  0:30
CLOCK: [2017-04-05 Wed 16:42]--[2017-04-05 Wed 16:52] =>  0:10
:END:
#+end_src
We can generate clock report table by executing ~C-c l c R~ or ~M-x org-clock-report~.
The following will be inserted at point, depending on the logbooks in the current document:
#+begin_src
#+BEGIN: clocktable :scope subtree :maxlevel 2
#+CAPTION: Clock summary at [2022-10-23 søn 09:56]
| Headline   | Time |
|------------+------|
| *Total time* | *0:41* |
|------------+------|
#+END:
#+end_src
A clocktable can be configured, for example, to show time clocked until now, like this:
#+begin_src
#+BEGIN: clocktable :maxlevel 3 :scope file :block untilnow
#+end_src
#+attr_html: :alt Time clocked in total :title Time clocked in total :width 100%
[[/images/hotel-california/clocktable-master.png]]
Time clocked today:
#+begin_src
#+BEGIN: clocktable :maxlevel 3 :scope file :block today
#+end_src
Time clocked yesterday:
#+begin_src
#+BEGIN: clocktable :maxlevel 3 :scope file :block yesterday
#+end_src
To update a clocktable, simply place the point somewhere in the ~BEGIN~ line, and press ~c c~.

For more on clocking time, see [[https://writequit.org/denver-emacs/presentations/2017-04-11-time-clocking-with-org.html][Clocking time with Org-mode]].

Often when writing, our progress can’t always be measured in words, so time spent is a good alternative.
*** Org-habit streak count
*** Words per heading
Using ~org-wc~.

#+attr_html: :alt Running M-x org-wc-display shows word count per heading :title Running M-x org-wc-display shows word count per heading :width 100%
[[/images/hotel-california/org-wc.png]]
*** Column view
Column view is a good way to view properties of headers. While we can view todo status, categories, tags, time logged, and other standard properties, we can add our own, custom properties, and this is where it gets real interesting for creative writers.
We can easily add properties to a heading by running ~C-c C-x p~:

#+attr_html: :alt Adding properties to a heading :title Adding properties to a heading :width 100%
[[/images/hotel-california/properties-actions.png]]

Now we can configure the ~COLUMNS~ special property, which will be inherited by child headings:
#+attr_html: :alt Setting up columns with properties :title Setting up columns with properties :width 100%
[[/images/hotel-california/columns-source.png]]

See [[https://orgmode.org/worg/org-tutorials/org-column-view-tutorial.html][Org column view tutorial]] for details.

Having set it all up, we can now run ~org-columns~ by pressing ~c x c~:
#+attr_html: :alt Column view :title Column view :width 100%
[[/images/hotel-california/columns.png]]

Pres ~q~ to exit.

** Organize the writing
*** Master document
** Capturing thoughts
** Saving the work
*** Magit
*** Unsaved changes
Sometimes you want to know what changes you have made to a buffer since your last save. Since you haven’t saved the file yet, Magit can’t help you, so you need something else. Fortunately, we can use Emacs’ ~diff-buffer-with-file~, mapped to ~C-d~.
#+attr_html: :alt Using diff to see the difference between buffer and file :title Using diff to see the difference between buffer and file :width 100%
[[/images/hotel-california/diff.png]]


Emacs will ask you for the file on disk, and then open a diff buffer where you can examine the differences. Use ~x o~ (o for ‘other’) to go to the diff buffer, if you’re not already in it. Using movement commands, like ~i o k l~, etc. And then, when done, close the buffer by pressing ~x 0~ (zero), or ~x 1~ if you’re not in the diff buffer.
** Exporting
*** HTML to E-book
*** PDF via LaTeX
*** Open Document Format
** Looking good and being comfortable
*** Themes and fonts
*** Zen-mode and transparency
#+attr_html: :alt Zen-mode with transparency turned on :title Zen-mode with transparency turned on :width 100%
[[/images/hotel-california/zen-mode.png]]
*** Scroll-center-cursor-mode
** Org-roam
*** Org-roam UI
** Other things
*** Journaling
*** Blogging
*** Bibliography
**** Zotero
[[https://www.zotero.org/][Zotero]] is used to gather and store and export the citations/references, by the use of the ~Better-Bibtex~ plugin.
#+attr_html: :alt Zotero :title Zotero :width 100%
[[/images/hotel-california/zotero.png]]
After installing Zotero itself, the plugin can be installed by following this guide: [[https://retorque.re/zotero-better-bibtex/installation/]]. When downloading using Firefox, I had to right-click and “save as” because otherwise Firefox thought I was trying to install a Firefox add-on due to the file-extension being the same.
#+attr_html: :alt BetterBibtex installed :title BetterBibtex installed :width 100%
[[/images/hotel-california/zotero-plugins.png]]
When the plugin has been successfully installed, it can be set up to automatically export and keep updated the LaTeX formatted Bibtex file that we need in order to use it from Emacs.
#+attr_html: :alt Zotero export settings :title Zotero export settings :width 100%
[[/images/hotel-california/zotero-export-settings.png]]
Choose “file - Export Library”, and choose the ~Better BibLaTeX~ as the format, and make sure to check the “keep updated” box. When you click “OK” you will be asked where to save the export. For my configuration, I have it as =~/Dropbox/skriv/jacmoe.bib=.

To actually populate the bibliography library, I am using the Zotero Firefox connector plugin. I can press a button in Firefox whenever I am visiting a resource.
**** Emacs
After all the work with Zotero, we are now ready to use the bibliography from within Emacs.
In the file where we want to insert citations, we configure the bibliography file to be used, and configure the export of the citations to use the CSL format:
#+begin_src
#+bibliography: ~/Dropbox/skriv/jacmoe.bib
#+cite_export: csl
#+end_src
Then, we set a placeholder for where the generated bibliography list will be rendered in the document:
#+begin_src
#+print_bibliography:
#+end_src
Now that we’re all set up, we can now insert citations into our document by running ~org-cite-insert~ (bound to ~C-c l @~)
#+attr_html: :alt Inserting a citation in Emacs :title Inserting a citation in Emacs :width 100%
[[/images/hotel-california/citation-insert.png]]
It will be rendered as ~[cite:@citation]~ in the org-file, but will be rendered correctly after export.
*** Snippets
*** Miscellaneous
**** Grabbing links from the web browser
By running ~M-x grab-x-link~ we can insert a link from an active web browser window.
It will ask you to choose your browser—Chromium, Chrome, Firefox, or Brave—and what format to use (plain, markdown or Org format). Much quicker than manually copying, pasting, and write the title manually. The links can be edited by ~c l~ , and opened by ~c o~.

** Conclusion
   Write the conclusion here

** Links
[[https://www.youtube.com/watch?v=SzA2YODtgK4][Getting Started With Org Mode - YouTube]]

[[https://www.youtube.com/watch?v=JHKrTsiz4JU][OrgMode E05S05: Tables - YouTube]]

[[https://emacsconf.org/2020/talks/03/][EmacsConf - 2020 - talks - Idea to Novel Superstructure: Emacs for Writing]]

[[https://www.linuxfordevices.com/tutorials/linux/emacs-editor-tutorial][Emacs Editor Tutorial - An Absolute Beginners Reference - LinuxForDevices]]

[[https://www.gnu.org/software/emacs/tour/][GNU Emacs - Guided Tour - GNU Project]]

* draft Creatively Writing Longhand :@post:writing:longhand:
:PROPERTIES:
:EXPORT_FILE_NAME: creatively-writing-longhand
:END:
#+begin_description
#+end_description
** Preface
Two years ago I wanted to start writing by hand. I quickly realized, however, that I couldn't do it. My handwriting was inefficient, inconsistent and unreadable. My hand cramped up and I could not write for more than fifteen minutes at a time.
  I have written journals by hand all my life, but with the advent of the computer I stopped writing in longhand. And I forgot how to do it. Since I wanted to go back to do creative writing by hand, I knew that I had to do something.
[[file:longhand/Palmer_Method_alphabet.jpg]]
** Notes
*** Benefits of writing
**** Increases learning comprehension
 Putting ink on paper stimulates a part of the brain called the Reticular Activating System, or the RAS. It works by giving more importance to the things you are actively focusing on.

 A [[https://www.wsj.com/articles/SB10001424052748704631504575531932754922518][study from 2010]]

**** Fully engages your brain
 Writing requires that you use more of your motor skills. Reading circuit. Activates more parts of your brain than typing.

**** Calms the body and nerves

**** Slows down mental aging

**** Unleashes creativity

**** Eases depression and anxiety

**** Enhances focus

**** Stimulates the brain

**** Makes you a better writer

*** Spencerian script
 Spencerian Script is a script styled developed by Platt Rogers Spencer in 1840. His script was based on already existing scripts, inspired by the shapes found in nature, resulting in a unique oval-based penmanship style that could be written very quickly and legibly. For the first time you didn't have to lift your pen

 From 1850 to 1925, Spencerian Script was the de facto writing style for business correspondence in the United States of America. It was the first longhand where you didn't have to lift your hand in the middle of words and was both rapid and highly legible. In the 1920s the growing popularity of the typewriter rendered it obsolete as the primary means of written communication in business.

**** Variants
***** Spencerian Standard Hand
***** Spencerian Business Hand
 [[file:longhand/SpencerianBusinessWriting.jpg][Spencerian Business Hand]]
***** Spencerian Abbreviated Hand

***** Spencerian Script
**** Further developments
***** Palmer method
***** Zaner-Boser
***** D'Nealian

*** Resources
**** Guideline generator
 This [[https://shipbrook.net/guidelines/][guideline generator]] can generate PDF guidelines especially for Spencerian writing. I usually set all the lines to "Non-photo blue" and print out a bunch to practice on.

**** New Spencerian Compendium
 You can get the [[https://www.iampeth.com/pdf/new-spencerian-compendium/][New Spencerian Compendium]] from the IAMPETH (International Association of Master Penmen) website. That site also have a wealth of resources, so be sure to explore.

**** Spencerian Method and copybooks
 You can download a copy of Spencerian Penmanship and the five copybooks here: [[https://www.docdroid.net/oxwk/theory-of-the-spencerian-method-of-papractical-penmanship-and-five-copybooks.pdf][Theory of the Spencerian method of penmanship and five copybooks]].

**** Palmer Method
 There is a website dedicated to the Palmer method of business writing: [[https://palmermethod.com/]] where you can find a series of self-teaching lessons.

# longhand/Palmer_Method_alphabet.jpg http://jacmoes.files.wordpress.com/2020/01/palmer_method_alphabet.jpg

#+print_bibliography:

* draft Creatively Writing Shorthand :@post:writing:shorthand:
:PROPERTIES:
:EXPORT_FILE_NAME: creatively-writing-shorthand
:END:
#+begin_description
#+end_description

* draft When rodents ate my internet connection :@post:creativity:
:PROPERTIES:
:EXPORT_FILE_NAME: when-rodents-ate-my-internet-connection
:END:
#+begin_description
#+end_description
* draft I Am Autistic :@post:autism:
:PROPERTIES:
:EXPORT_FILE_NAME: i-am-autistic
:END:
#+begin_description
#+end_description

# LocalWords: hugo dir TODO todo RAS Platt de facto Zaner Boser D'Nealian el wc
# LocalWords: IAMPETH Writegood writegood Typopunct typopunct UI Zotero Bibtex
#  LocalWords:  BetterBibtex CSL OrgMode EmacsConf LinuxForDevices
#  LocalWords:  attr html src et cetera Powerthesaurus Proselint Magit config

* done Welcome to my new blog :@announcement:hugo:emacs:blog:
CLOSED: [2022-03-29 Tue 00:50]
:PROPERTIES:
:EXPORT_FILE_NAME: welcome-to-my-new-blog
:export_hugo_custom_front_matter: :featured_image /images/hugoblog.png
:END:
#+begin_description
I used Emacs to export to WordPress, and had to tweak the HTML, and that has obviously put me off writing blog posts, as evidenced by the single blog post in two and a half years. Hugo, Github Pages, and the excellent Ox-hugo Org-mode exporter has made my blogging pipe-line smooth and enjoyable. I expect to blog a lot more in the future.
#+end_description
#+attr_html: :alt My new Emacs Hugo powered blog :title My new Emacs Hugo powered blog :width 100%
[[/images/hugoblog.png]]

My [[https://jacmoes.wordpress.com/][old blog]] at WordPress only has one single post in it.

I wrote it using Org-mode in Emacs, and used an extension to put it on WordPress.

That was good.

I had to perform a lot of tweaking to the HTML, however, and that has obviously put me off just writing blog posts.

That was bad.

So, I wanted something as easy as writing a blog post in my favorite writing environment, committing the changes to git source control, and pushing it to a remote repository to be hosted. I don't want to deal with a website like WordPress, to be honest.

** Hugo and Emacs
After hunting around, I stumbled over a good workflow using [[https://gohugo.io/][Hugo ]] and the excellent Emacs extension =ox-hugo=.
All I have to do is write my blog posts in one org-file within Emacs, export to Hugo using the exporter, and let Hugo generate the output. Then I commit the changes to my git repository, push it to GitHub, and my homepage is updated.

I don't have to mess around with anything, like I did in WordPress.

Since it's now going to be much easier to get a blog post up, I am sure I will actually blog a post or two now :)

I have several ideas, and the good thing about it is, that I can have those posts in my org-file, as sub-trees, because the [[https://ox-hugo.scripter.co/][Emacs Hugo exporter]] will only export the trees that are =DONE=, not the ones marked with =TODO=.

It should be easy to blog, and I am most comfortable in Emacs. So, there's that :)
