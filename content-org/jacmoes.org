#+STARTUP: fold
#+hugo_base_dir: ..
#+bibliography: ~/Dropbox/skriv/jacmoe.bib
#+cite_export: csl
#+OPTIONS: ^:nil â€˜:nil
* done First Entry in my new Gemini Log :@post:gemini:gemlog:
CLOSED: [2023-03-17 fre 17:15]
:PROPERTIES:
:EXPORT_FILE_NAME: first_entry_in_my_new_gemini_log
:END:
#+begin_description
Announcing the first entry in my sparklingly new Gemini log!
#+end_description
#+begin_export html
<a href="/images/gemtext.png" rel="gemlog" class="swipebox" title="First enty in my new Gemlog">
    <img alt="First entry in my new Gemlog" src="/images/gemtext_small.png"/>
</a>
#+end_export
The first entry of my [[https://gemini.circumlunar.space/][Gemini]] Log (Gemlog) is up: [[https://jacmoe.pollux.casa/gemlog/2023-03-17_hello_universe.gmi][2023-03-17 - Hello, Universe!]]

I am thinking that my Gemini Capsule should be a place for me to share my writing, my writerâ€™s journal, and my musings about writing.

Much simpler to put something up on Gemini: simply write a simple text, and put it on the server.

Hereâ€™s to many more entries in the Gemlog! ðŸš€

* done Local Gemini Server - Quick and Dirty :@post:gemini:
CLOSED: [2023-03-14 tir 14:22]
:PROPERTIES:
:EXPORT_FILE_NAME: local_gemini_server_quick_and_dirty
:END:
#+begin_description
This is a quick guide to get a local Gemini server up and running. Useful when you are authoring a Gemini capsule and want to test it before pushing it to a server accessible to the world.
#+end_description

If you, like me, are excited about [[https://gemini.circumlunar.space/][Project Gemini]] and want to create your own capsule (Gemini site), you will probably wonder how you would test your capsule on your local machine before putting it out there.

This small (and dirty!) guide aims to remove that doubt.

So, without further dillydally, here goes:

Install [[https://pypi.org/project/gmcapsule/][GmCapsule]] by running the following command, assuming that Python is installed:
#+begin_src bash
pip install gmcapsule
#+end_src

Now, create a ~.gmcapsulerc~ file in your home directory, with the following content:
#+begin_src bash
[static]
root = /home/moena/gemini/capsule/
 #+end_src
~root~ should point to where the Gemini files are to be served from.

Notice that the server name is appended to the path above, which means that the real path to the ~index.gmi~ file for the root of the site is located in ~/home/moena/gemini/capsule/localhost~.

Now we need to create a server certificate and the corresponding key.

Create a directory called ~.certs~ in your home directory, cd into it, and run the following command:
#+begin_src bash
openssl req -new -x509 -days 365 -nodes -out cert.pem -keyout key.pem -subj "/CN=localhost" -newkey rsa:4096 -addext "subjectAltName = DNS:localhost"
#+end_src
The ~.certs~ directory should now contain two files, ~cert.pem~ and ~key.pem~. The GmCapsule server loads the certificate upon startup.

Now, start the server by running:
#+begin_src bash
gmcapsuled
#+end_src

Use a Gemini client, like ~amfora~ to browse your local Gemini capsule:
#+begin_src bash
amfora gemini://localhost/
#+end_src

Now, enjoy creating content for Gemini!

I am excited about the whole idea of the small internet, and the syntax for the ~.gmi~ files are so simple, much simpler than even Markdown. I like not having to mess around with HTML, CSS, Javascript, fonts ... Just plain text.

I will probably be writing more about Gemini in the future â˜º


/PS: you might have to open port 1965 if you are running a firewall./

* draft Emacs - my Hotel California of creative writing :@post:emacs:org_mode:writing:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-my-hotel-california-of-creative-writing
:END:
* draft Creatively Writing Longhand :@post:writing:longhand:
:PROPERTIES:
:EXPORT_FILE_NAME: creatively-writing-longhand
:END:
#+begin_description
#+end_description
** Preface
Two years ago I wanted to start writing by hand. I quickly realized, however, that I couldn't do it. My handwriting was inefficient, inconsistent and unreadable. My hand cramped up and I could not write for more than fifteen minutes at a time.
  I have written journals by hand all my life, but with the advent of the computer I stopped writing in longhand. And I forgot how to do it. Since I wanted to go back to do creative writing by hand, I knew that I had to do something.
[[file:longhand/Palmer_Method_alphabet.jpg]]
** Notes
*** Benefits of writing
**** Increases learning comprehension
 Putting ink on paper stimulates a part of the brain called the Reticular Activating System, or the RAS. It works by giving more importance to the things you are actively focusing on.

 A [[https://www.wsj.com/articles/SB10001424052748704631504575531932754922518][study from 2010]]

**** Fully engages your brain
 Writing requires that you use more of your motor skills. Reading circuit. Activates more parts of your brain than typing.

**** Calms the body and nerves

**** Slows down mental aging

**** Unleashes creativity

**** Eases depression and anxiety

**** Enhances focus

**** Stimulates the brain

**** Makes you a better writer

*** Spencerian script
 Spencerian Script is a script styled developed by Platt Rogers Spencer in 1840. His script was based on already existing scripts, inspired by the shapes found in nature, resulting in a unique oval-based penmanship style that could be written very quickly and legibly. For the first time you didn't have to lift your pen

 From 1850 to 1925, Spencerian Script was the de facto writing style for business correspondence in the United States of America. It was the first longhand where you didn't have to lift your hand in the middle of words and was both rapid and highly legible. In the 1920s the growing popularity of the typewriter rendered it obsolete as the primary means of written communication in business.

**** Variants
***** Spencerian Standard Hand
***** Spencerian Business Hand
 [[file:longhand/SpencerianBusinessWriting.jpg][Spencerian Business Hand]]
***** Spencerian Abbreviated Hand

***** Spencerian Script
**** Further developments
***** Palmer method
***** Zaner-Boser
***** D'Nealian

*** Resources
**** Guideline generator
 This [[https://shipbrook.net/guidelines/][guideline generator]] can generate PDF guidelines especially for Spencerian writing. I usually set all the lines to "Non-photo blue" and print out a bunch to practice on.

**** New Spencerian Compendium
 You can get the [[https://www.iampeth.com/pdf/new-spencerian-compendium/][New Spencerian Compendium]] from the IAMPETH (International Association of Master Penmen) website. That site also have a wealth of resources, so be sure to explore.

**** Spencerian Method and copybooks
 You can download a copy of Spencerian Penmanship and the five copybooks here: [[https://www.docdroid.net/oxwk/theory-of-the-spencerian-method-of-papractical-penmanship-and-five-copybooks.pdf][Theory of the Spencerian method of penmanship and five copybooks]].

**** Palmer Method
 There is a website dedicated to the Palmer method of business writing: [[https://palmermethod.com/]] where you can find a series of self-teaching lessons.

# longhand/Palmer_Method_alphabet.jpg http://jacmoes.files.wordpress.com/2020/01/palmer_method_alphabet.jpg

#+print_bibliography:

* draft Creatively Writing Shorthand :@post:writing:shorthand:
:PROPERTIES:
:EXPORT_FILE_NAME: creatively-writing-shorthand
:END:
#+begin_description
#+end_description

* draft When rodents ate my internet connection :@post:creativity:
:PROPERTIES:
:EXPORT_FILE_NAME: when-rodents-ate-my-internet-connection
:END:
#+begin_description
#+end_description
* draft I Am Autistic :@post:autism:
:PROPERTIES:
:EXPORT_FILE_NAME: i-am-autistic
:END:
#+begin_description
#+end_description

# LocalWords: hugo dir TODO todo RAS Platt de facto Zaner Boser D'Nealian el wc
# LocalWords: IAMPETH Writegood writegood Typopunct typopunct UI Zotero Bibtex
#  LocalWords:  BetterBibtex CSL OrgMode EmacsConf LinuxForDevices emacs kmacro
#  LocalWords:  attr html src et cetera Powerthesaurus Proselint Magit config
#  LocalWords:  TOC Noexport youtube tracktable br clocktable Biblography yjwen
#  LocalWords:  js ibuffer ie zee un

* done Welcome to my new blog :@announcement:hugo:emacs:blog:
CLOSED: [2022-03-29 Tue 00:50]
:PROPERTIES:
:EXPORT_FILE_NAME: welcome-to-my-new-blog
:export_hugo_custom_front_matter: :featured_image /images/hugoblog.png
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :comments '((host . "writing.exchange") (username . "jacmoe") (id . 109342914182848028))
:END:
#+begin_description
I used Emacs to export to WordPress, and had to tweak the HTML, and that has obviously put me off writing blog posts, as evidenced by the single blog post in two and a half years. Hugo, Github Pages, and the excellent Ox-hugo Org-mode exporter has made my blogging pipe-line smooth and enjoyable. I expect to blog a lot more in the future.
#+end_description
    #+begin_export html
    <a href="/images/hugoblog.png" rel="hugoblog" class="swipebox" title="My new Emacs Hugo powered blog">
        <img alt="My new Emacs Hugo powered blog" src="/images/hugoblog.png"/>
    </a>
    #+end_export

My [[https://jacmoes.wordpress.com/][old blog]] at WordPress only has one single post in it.

I wrote it using Org-mode in Emacs, and used an extension to put it on WordPress.

That was good.

I had to perform a lot of tweaking to the HTML, however, and that has obviously put me off just writing blog posts.

That was bad.

So, I wanted something as easy as writing a blog post in my favorite writing environment, committing the changes to git source control, and pushing it to a remote repository to be hosted. I don't want to deal with a website like WordPress, to be honest.

** Hugo and Emacs
After hunting around, I stumbled over a good workflow using [[https://gohugo.io/][Hugo ]] and the excellent Emacs extension =ox-hugo=.
All I have to do is write my blog posts in one org-file within Emacs, export to Hugo using the exporter, and let Hugo generate the output. Then I commit the changes to my git repository, push it to GitHub, and my homepage is updated.

I don't have to mess around with anything, like I did in WordPress.

Since it's now going to be much easier to get a blog post up, I am sure I will actually blog a post or two now :)

I have several ideas, and the good thing about it is, that I can have those posts in my org-file, as sub-trees, because the [[https://ox-hugo.scripter.co/][Emacs Hugo exporter]] will only export the trees that are =DONE=, not the ones marked with =TODO=.

It should be easy to blog, and I am most comfortable in Emacs. So, there's that :)
* pages
:PROPERTIES:
:EXPORT_HUGO_CUSTOM_FRONT_MATTER: :noauthor true :nocomment true :nodate true :nopaging true :noread true
:EXPORT_HUGO_MENU: :menu main
:EXPORT_HUGO_SECTION: pages
:EXPORT_HUGO_WEIGHT: auto
:END:
** draft Gallery
:PROPERTIES:
:EXPORT_FILE_NAME: gallery
:END:
Hotel California of Creative Writing
#+begin_export html
<div id="gallery">
    <a href="/gallery/hoca/1splash.png" rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/1splash.png"/>
    </a>
    <a href="/gallery/hoca/2zen.png" rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/2zen.png"/>
    </a>
    <a href="/gallery/hoca/3tracktable.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/3tracktable.png"/>
    </a>
    <a href="/gallery/hoca/4dictionary.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/4dictionary.png"/>
    </a>
    <a href="/gallery/hoca/5webster.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/5webster.png"/>
    </a>
    <a href="/gallery/hoca/6synonyms.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/6synonyms.png"/>
    </a>
    <a href="/gallery/hoca/7definitions.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/7definitions.png"/>
    </a>
    <a href="/gallery/hoca/8sentences.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/8sentences.png"/>
    </a>
    <a href="/gallery/hoca/9clocktable.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/9clocktable.png"/>
    </a>
    <a href="/gallery/hoca/10pomodoro.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/10pomodoro.png"/>
    </a>
    <a href="/gallery/hoca/11pomodoro_light.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/11pomodoro_light.png"/>
    </a>
    <a href="/gallery/hoca/12columns.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/12columns.png"/>
    </a>
    <a href="/gallery/hoca/13orgwc.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/13orgwc.png"/>
    </a>
    <a href="/gallery/hoca/14writegoodmode.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/14writegoodmode.png"/>
    </a>
    <a href="/gallery/hoca/15proselint.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img alt="caption for image 1" src="/gallery/hocasmall/15proselint.png"/>
    </a>
    <a href="/gallery/hoca/16diff.png"  rel="hhc" class="swipebox" title="caption for image 1">
        <img title="caption for image 1" src="/gallery/hocasmall/16diff.png"/>
    </a>
</div>
#+end_export
** draft About
:PROPERTIES:
:EXPORT_FILE_NAME: about
:END:
About me
