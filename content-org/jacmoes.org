#+STARTUP: fold
#+hugo_base_dir: ..
#+bibliography: ~/Dropbox/skriv/jacmoe.bib
#+cite_export: csl
* draft Emacs - my Hotel California of creative writing :@post:emacs:org_mode:writing:
:PROPERTIES:
:EXPORT_FILE_NAME: emacs-my-hotel-california-of-creative-writing
:END:
#+begin_description
#+end_description
** Introduction
#+attr_html: :alt Emacs - my Hotel California :title Emacs - my Hotel California :width 100%
[[/images/hotel-california/hotel-california.png]]

This blog post is a detailed explanation of why Emacs is my Hotel California of creative writing. It shows how I have created a writing environment exactly how I want it to be, and why there—in my mind—is nothing out there that compares to it.

** Emacs
I can make Emacs fit my workflow rather than the other way around.
*** Doom-Emacs
[[https://github.com/hlissner/doom-emacs][Doom-Emacs]] is a minimalist modern Emacs distribution that is light and fast.
** Org-mode
*** Official format
*** Out-liner
#+attr_html: :alt Org-mode is an out-liner :title Org-mode is an out-liner :width 80% :controls t
#+begin_video
<source src="/videos/hotel-california/outliner.mp4" type="video/mp4">
Your browser does not support the video tag.
#+end_video
*** Organizer
*** Extendable
*** One hundred percent pure text
** Boon
** Dictionaries et cetera
*** Dictionary server
*** Webster
*** Powerthesaurus
*** Proselint
#+attr_html: :alt Proselint has checked the text and is not satisfied :title Proselint has checked the text and is not satisfied :width 100%
[[/images/hotel-california/proselint.png]]
*** Writegood-mode
~Writegood-mode~ is a minor mode that will highlight weasel words and passive voice.
#+attr_html: :alt Writegood-mode :title Writegood-mode :width 100%
[[/images/hotel-california/writegood-mode.png]]
The weasel words are highlighted in orange, passive voice in cyan.

Additional weasel words can be added to writegood-mode by editing the ~my/weasel-words~ list in ~config.el~ in the Doom user directory.
*** Typopunct
~Typopunct~ is a package that enables us to simply write regular ASCII single and double quotes and have them automatically be converted into typographical quotes.

For example, typing ~'quoted'~ will result in ‘quoted’, and ~"double-quoted"~ will result in “double-quoted”.

If we want to actually write a regular ASCII single or double quote, we need to use ~quoted-insert~, which is bound to ~C-q~, like this: ~C-q "~ to insert an ASCII ~"~.

/Note: some exporters, like the Hugo exporter, will automatically convert regular ASCII quotes to typographical quotes, unless you wrap them in code tags (~)/.

Additionally, ~typopunct~ also allows us to insert ~en-dash~ and ~em-dash~ by typing  ~--~ for – and ~---~ for —.
*** Special characters
** Tracking progress
*** Track-table
*** Clocking time
*** Org-habit streak count
*** Words per heading
Using ~org-wc~.

#+attr_html: :alt Running M-x org-wc-display shows word count per heading :title Running M-x org-wc-display shows word count per heading :width 100%
[[/images/hotel-california/org-wc.png]]
*** Column view
Column view is a good way to view properties of headers. While we can view todo status, categories, tags, time logged, and other standard properties, we can add our own, custom properties, and this is where it gets real interesting for creative writers.
We can easily add properties to a heading by running the following command: ~C-c C-x p~.

If in a ~:PROPERTIES:~ block, we can act on properties by running ~c c~:
#+attr_html: :alt Running properties action :title Running properties action :width 100%
[[/images/hotel-california/properties-actions.png]]

** Organize the writing
*** Master outline
** Capturing thoughts
** Saving the work
*** Magit
*** Unsaved changes
Sometimes you want to know what changes you have made to a buffer since your last save. Since you haven’t saved the file yet, Magit can’t help you, so you need something else. Fortunately, we can use Emacs’ ~diff-buffer-with-file~, mapped to ~C-d~.
#+attr_html: :alt Using diff to see the difference between buffer and file :title Using diff to see the difference between buffer and file :width 100%
[[/images/hotel-california/diff.png]]


Emacs will ask you for the file on disk, and then open a diff buffer where you can examine the differences. Use ~x o~ (o for ‘other’) to go to the diff buffer, if you’re not already in it. Using movement commands, like ~i o k l~, etc. And then, when done, close the buffer by pressing ~x 0~ (zero), or ~x 1~ if you’re not in the diff buffer.
** Exporting
*** HTML to E-book
*** PDF via LaTeX
*** Open Document Format
** Looking good and being comfortable
*** Themes and fonts
*** Zen-mode and transparency
#+attr_html: :alt Zen-mode with transparency turned on :title Zen-mode with transparency turned on :width 100%
[[/images/hotel-california/zen-mode.png]]
*** Scroll-center-cursor-mode
** Org-roam
*** Org-roam UI
** Other things
*** Journaling
*** Blogging
*** Bibliography
**** Zotero
[[https://www.zotero.org/][Zotero]] is used to gather and store and export the citations/references, by the use of the ~Better-Bibtex~ plugin.
#+attr_html: :alt Zotero :title Zotero :width 100%
[[/images/hotel-california/zotero.png]]
After installing Zotero itself, the plugin can be installed by following this guide: [[https://retorque.re/zotero-better-bibtex/installation/]]. When downloading using Firefox, I had to right-click and “save as” because otherwise Firefox thought I was trying to install a Firefox add-on due to the file-extension being the same.
#+attr_html: :alt BetterBibtex installed :title BetterBibtex installed :width 100%
[[/images/hotel-california/zotero-plugins.png]]
When the plugin has been successfully installed, it can be set up to automatically export and keep updated the LaTeX formatted Bibtex file that we need in order to use it from Emacs.
#+attr_html: :alt Zotero export settings :title Zotero export settings :width 100%
[[/images/hotel-california/zotero-export-settings.png]]
Choose “file - Export Library”, and choose the ~Better BibLaTeX~ as the format, and make sure to check the “keep updated” box. When you click “OK” you will be asked where to save the export. For my configuration, I have it as =~/Dropbox/skriv/jacmoe.bib=.

To actually populate the bibliography library, I am using the Zotero Firefox connector plugin. I can press a button in Firefox whenever I am visiting a resource.
**** Emacs
After all the work with Zotero, we are now ready to use the bibliography from within Emacs.
In the file where we want to insert citations, we configure the bibliography file to be used, and configure the export of the citations to use the CSL format:
#+begin_src
#+bibliography: ~/Dropbox/skriv/jacmoe.bib
#+cite_export: csl
#+end_src
Then, we set a placeholder for where the generated bibliography list will be rendered in the document:
#+begin_src
#+print_bibliography:
#+end_src
Now that we’re all set up, we can now insert citations into our document by running ~org-cite-insert~ (bound to ~C-c l @~)
#+attr_html: :alt Inserting a citation in Emacs :title Inserting a citation in Emacs :width 100%
[[/images/hotel-california/citation-insert.png]]
It will be rendered as ~[cite:@citation]~ in the org-file, but will be rendered correctly after export.
*** Snippets
** Conclusion
   Write the conclusion here

#  LocalWords:  attr html src et cetera Powerthesaurus Proselint Magit config

* draft Creatively Writing Longhand :@post:writing:longhand:
:PROPERTIES:
:EXPORT_FILE_NAME: creatively-writing-longhand
:END:
#+begin_description
#+end_description
** Preface
Two years ago I wanted to start writing by hand. I quickly realized, however, that I couldn't do it. My handwriting was inefficient, inconsistent and unreadable. My hand cramped up and I could not write for more than fifteen minutes at a time.
  I have written journals by hand all my life, but with the advent of the computer I stopped writing in longhand. And I forgot how to do it. Since I wanted to go back to do creative writing by hand, I knew that I had to do something.
[[file:longhand/Palmer_Method_alphabet.jpg]]
** Notes
*** Benefits of writing
**** Increases learning comprehension
 Putting ink on paper stimulates a part of the brain called the Reticular Activating System, or the RAS. It works by giving more importance to the things you are actively focusing on.

 A [[https://www.wsj.com/articles/SB10001424052748704631504575531932754922518][study from 2010]]

**** Fully engages your brain
 Writing requires that you use more of your motor skills. Reading circuit. Activates more parts of your brain than typing.

**** Calms the body and nerves

**** Slows down mental aging

**** Unleashes creativity

**** Eases depression and anxiety

**** Enhances focus

**** Stimulates the brain

**** Makes you a better writer

*** Spencerian script
 Spencerian Script is a script styled developed by Platt Rogers Spencer in 1840. His script was based on already existing scripts, inspired by the shapes found in nature, resulting in a unique oval-based penmanship style that could be written very quickly and legibly. For the first time you didn't have to lift your pen

 From 1850 to 1925, Spencerian Script was the de facto writing style for business correspondence in the United States of America. It was the first longhand where you didn't have to lift your hand in the middle of words and was both rapid and highly legible. In the 1920s the growing popularity of the typewriter rendered it obsolete as the primary means of written communication in business.

**** Variants
***** Spencerian Standard Hand
***** Spencerian Business Hand
 [[file:longhand/SpencerianBusinessWriting.jpg][Spencerian Business Hand]]
***** Spencerian Abbreviated Hand

***** Spencerian Script
**** Further developments
***** Palmer method
***** Zaner-Boser
***** D'Nealian

*** Resources
**** Guideline generator
 This [[https://shipbrook.net/guidelines/][guideline generator]] can generate PDF guidelines especially for Spencerian writing. I usually set all the lines to "Non-photo blue" and print out a bunch to practice on.

**** New Spencerian Compendium
 You can get the [[https://www.iampeth.com/pdf/new-spencerian-compendium/][New Spencerian Compendium]] from the IAMPETH (International Association of Master Penmen) website. That site also have a wealth of resources, so be sure to explore.

**** Spencerian Method and copybooks
 You can download a copy of Spencerian Penmanship and the five copybooks here: [[https://www.docdroid.net/oxwk/theory-of-the-spencerian-method-of-papractical-penmanship-and-five-copybooks.pdf][Theory of the Spencerian method of penmanship and five copybooks]].

**** Palmer Method
 There is a website dedicated to the Palmer method of business writing: [[https://palmermethod.com/]] where you can find a series of self-teaching lessons.

# longhand/Palmer_Method_alphabet.jpg http://jacmoes.files.wordpress.com/2020/01/palmer_method_alphabet.jpg

#+print_bibliography:

* draft Creatively Writing Shorthand :@post:writing:shorthand:
:PROPERTIES:
:EXPORT_FILE_NAME: creatively-writing-shorthand
:END:
#+begin_description
#+end_description

* draft When rodents ate my internet connection :@post:creativity:
:PROPERTIES:
:EXPORT_FILE_NAME: when-rodents-ate-my-internet-connection
:END:
#+begin_description
#+end_description
* draft I Am Autistic :@post:autism:
:PROPERTIES:
:EXPORT_FILE_NAME: i-am-autistic
:END:
#+begin_description
#+end_description

# LocalWords: hugo dir TODO todo RAS Platt de facto Zaner Boser D'Nealian el wc
# LocalWords: IAMPETH Writegood writegood Typopunct typopunct UI Zotero Bibtex
#  LocalWords:  BetterBibtex CSL
* done Welcome to my new blog :@announcement:hugo:emacs:blog:
CLOSED: [2022-03-29 Tue 00:50]
:PROPERTIES:
:EXPORT_FILE_NAME: welcome-to-my-new-blog
:export_hugo_custom_front_matter: :featured_image /images/hugoblog.png
:END:
#+begin_description
I used Emacs to export to WordPress, and had to tweak the HTML, and that has obviously put me off writing blog posts, as evidenced by the single blog post in two and a half years. Hugo, Github Pages, and the excellent Ox-hugo Org-mode exporter has made my blogging pipe-line smooth and enjoyable. I expect to blog a lot more in the future.
#+end_description
#+attr_html: :alt My new Emacs Hugo powered blog :title My new Emacs Hugo powered blog :width 100%
[[/images/hugoblog.png]]

My [[https://jacmoes.wordpress.com/][old blog]] at WordPress only has one single post in it.

I wrote it using Org-mode in Emacs, and used an extension to put it on WordPress.

That was good.

I had to perform a lot of tweaking to the HTML, however, and that has obviously put me off just writing blog posts.

That was bad.

So, I wanted something as easy as writing a blog post in my favorite writing environment, committing the changes to git source control, and pushing it to a remote repository to be hosted. I don't want to deal with a website like WordPress, to be honest.

** Hugo and Emacs
After hunting around, I stumbled over a good workflow using [[https://gohugo.io/][Hugo ]] and the excellent Emacs extension =ox-hugo=.
All I have to do is write my blog posts in one org-file within Emacs, export to Hugo using the exporter, and let Hugo generate the output. Then I commit the changes to my git repository, push it to GitHub, and my homepage is updated.

I don't have to mess around with anything, like I did in WordPress.

Since it's now going to be much easier to get a blog post up, I am sure I will actually blog a post or two now :)

I have several ideas, and the good thing about it is, that I can have those posts in my org-file, as sub-trees, because the [[https://ox-hugo.scripter.co/][Emacs Hugo exporter]] will only export the trees that are =DONE=, not the ones marked with =TODO=.

It should be easy to blog, and I am most comfortable in Emacs. So, there's that :)
