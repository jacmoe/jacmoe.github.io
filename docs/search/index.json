
{
    
    
    
    
        
        
            
                
            
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2023-03-17","image":"/images/gemtext_small.png","imageAlt":"","link":"https://jacmoe.github.io/posts/first_entry_in_my_new_gemini_log/","summary":"Announcing the first entry in my sparklingly new Gemini log!","tags":["gemini","gemlog"],"text":" the first entry of my gemini log (gemlog) is up: 2023-03-17 - hello, universe!\ni am thinking that my gemini capsule should be a place for me to share my writing, my writerâ€™s journal, and my musings about writing.\nmuch simpler to put something up on gemini: simply write a simple text, and put it on the server.\nhereâ€™s to many more entries in the gemlog! ðŸš€\n","title":"First Entry in my new Gemini Log"},{"date":"2023-03-14","image":"","imageAlt":"","link":"https://jacmoe.github.io/posts/local_gemini_server_quick_and_dirty/","summary":"This is a quick guide to get a local Gemini server up and running. Useful when you are authoring a Gemini capsule and want to test it before pushing it to a server accessible to the world.","tags":["gemini"],"text":"if you, like me, are excited about project gemini and want to create your own capsule (gemini site), you will probably wonder how you would test your capsule on your local machine before putting it out there.\nthis small (and dirty!) guide aims to remove that doubt.\nso, without further dillydally, here goes:\ninstall gmcapsule by running the following command, assuming that python is installed:\npip install gmcapsule now, create a .gmcapsulerc file in your home directory, with the following content:\n[static] root = /home/moena/gemini/capsule/ root should point to where the gemini files are to be served from.\nnotice that the server name is appended to the path above, which means that the real path to the index.gmi file for the root of the site is located in /home/moena/gemini/capsule/localhost.\nnow we need to create a server certificate and the corresponding key.\ncreate a directory called .certs in your home directory, cd into it, and run the following command:\nopenssl req -new -x509 -days 365 -nodes -out cert.pem -keyout key.pem -subj \u0026#34;/cn=localhost\u0026#34; -newkey rsa:4096 -addext \u0026#34;subjectaltname = dns:localhost\u0026#34; the .certs directory should now contain two files, cert.pem and key.pem. the gmcapsule server loads the certificate upon startup.\nnow, start the server by running:\ngmcapsuled use a gemini client, like amfora to browse your local gemini capsule:\namfora gemini://localhost/ now, enjoy creating content for gemini!\ni am excited about the whole idea of the small internet, and the syntax for the .gmi files are so simple, much simpler than even markdown. i like not having to mess around with html, css, javascript, fonts \u0026hellip; just plain text.\ni will probably be writing more about gemini in the future â˜º\nps: you might have to open port 1965 if you are running a firewall.\n","title":"Local Gemini Server - Quick and Dirty"},{"date":"2022-03-29","image":"","imageAlt":"","link":"https://jacmoe.github.io/posts/welcome-to-my-new-blog/","summary":"I used Emacs to export to WordPress, and had to tweak the HTML, and that has obviously put me off writing blog posts, as evidenced by the single blog post in two and a half years. Hugo, Github Pages, and the excellent Ox-hugo Org-mode exporter has made my blogging pipe-line smooth and enjoyable. I expect to blog a lot more in the future.","tags":["blog","emacs","hugo"],"text":" my old blog at wordpress only has one single post in it.\ni wrote it using org-mode in emacs, and used an extension to put it on wordpress.\nthat was good.\ni had to perform a lot of tweaking to the html, however, and that has obviously put me off just writing blog posts.\nthat was bad.\nso, i wanted something as easy as writing a blog post in my favorite writing environment, committing the changes to git source control, and pushing it to a remote repository to be hosted. i don\u0026rsquo;t want to deal with a website like wordpress, to be honest.\nhugo and emacs after hunting around, i stumbled over a good workflow using hugo and the excellent emacs extension ox-hugo. all i have to do is write my blog posts in one org-file within emacs, export to hugo using the exporter, and let hugo generate the output. then i commit the changes to my git repository, push it to github, and my homepage is updated.\ni don\u0026rsquo;t have to mess around with anything, like i did in wordpress.\nsince it\u0026rsquo;s now going to be much easier to get a blog post up, i am sure i will actually blog a post or two now :)\ni have several ideas, and the good thing about it is, that i can have those posts in my org-file, as sub-trees, because the emacs hugo exporter will only export the trees that are done, not the ones marked with todo.\nit should be easy to blog, and i am most comfortable in emacs. so, there\u0026rsquo;s that :)\n","title":"Welcome to my new blog"}]
}

